// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ErrorHandling {
    uint public currentMultiplier = 10;
    
    function doubleIfGreaterThanTen(uint number) public pure returns(uint) {
        require(number > 10, "Input must be greater than 10");
        return number * 2;
    }
    
    function doubleAndCheck(uint input) public returns(uint) {
        currentMultiplier = currentMultiplier * 2;
        if(input > 10) {
            revert("Input should not be greater than 10");
        }
        return currentMultiplier;
    }
    
    function squareAndAssertZero(uint input) public returns(string memory) {
        currentMultiplier = currentMultiplier * currentMultiplier;
        assert(input == 0);
        return "Input matches zero";
    }
    
    error CustomError(uint256 providedValue, string message);
    
    function checkGasLimit(uint256 threshold) public view {
        uint256 currentGasLimit = block.gaslimit;
        if (currentGasLimit > threshold) {
            revert CustomError(threshold, "Current gas limit exceeds threshold");
        }
    }
}
